From e128c4dc0d3a330eaac50245a276e22777b416ab Mon Sep 17 00:00:00 2001
From: "Five (Xer)" <admin@xernium.com>
Date: Fri, 14 Feb 2020 16:17:04 +0100
Subject: [PATCH] Pre Update Tracking 1.16 changes


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 191f0504..680bc066 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -157,7 +157,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x49 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4A )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4A ),
+                    /* 20w12a+ 0x4A -> 0x4B */ map( ProtocolConstants.MINECRAFT_1_16_20w12a, 0x4B ) // Travertine
             );
             TO_CLIENT.registerPacket(
                     ScoreboardScore.class,
@@ -168,8 +169,9 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4D )
-            );
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4D ),
+                    /* 20w12a+ 0x4D -> 0x4E */ map( ProtocolConstants.MINECRAFT_1_16_20w12a, 0x4E ) // Travertine
+                    );
             TO_CLIENT.registerPacket(
                     ScoreboardDisplay.class,
                     ScoreboardDisplay::new, // Waterfall - speed up packet construction
@@ -179,7 +181,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x3E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x43 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x43 ),
+                    /* 20w12a+ 0x43 -> 0x44 */ map( ProtocolConstants.MINECRAFT_1_16_20w12a, 0x44 ) // Travertine
             );
             TO_CLIENT.registerPacket(
                     Team.class,
@@ -190,7 +193,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x44 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4C )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4C ),
+                    /* 20w12a+ 0x4C -> 0x4D */ map( ProtocolConstants.MINECRAFT_1_16_20w12a, 0x4D ) // Travertine
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index 05f65a80..6b182c8f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -30,6 +30,18 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_15 = 573;
     public static final int MINECRAFT_1_15_1 = 575;
     public static final int MINECRAFT_1_15_2 = 578;
+    public static final int MINECRAFT_1_16_20w06a = 701; // Travertine start
+    public static final int MINECRAFT_1_16_20w07a = 702;
+    public static final int MINECRAFT_1_16_20w08a = 703;
+    public static final int MINECRAFT_1_16_20w09a = 704;
+    public static final int MINECRAFT_1_16_20w10a = 705;
+    public static final int MINECRAFT_1_16_20w11a = 706;
+    public static final int MINECRAFT_1_16_20w12a = 707;
+    public static final int MINECRAFT_1_16_20w13a = 708;
+    public static final int MINECRAFT_1_16_20w13b = 709;
+    public static final int MINECRAFT_1_16_20w14a = 710;
+    public static final int MINECRAFT_1_16_20w15a = 711;
+    public static final int MINECRAFT_1_16_FUTURE_SNAPSHOT = 712; // Travertine end
     public static final List<String> SUPPORTED_VERSIONS = Arrays.asList(
             "1.7.x",
             "1.8.x",
@@ -39,7 +51,8 @@ public class ProtocolConstants
             "1.12.x",
             "1.13.x",
             "1.14.x",
-            "1.15.x"
+            "1.15.x", // Travertine start
+            "1.16" // Travertine end
     );
     public static final List<Integer> SUPPORTED_VERSION_IDS = Arrays.asList(
             ProtocolConstants.MINECRAFT_1_7_2,
@@ -65,7 +78,19 @@ public class ProtocolConstants
             ProtocolConstants.MINECRAFT_1_14_4,
             ProtocolConstants.MINECRAFT_1_15,
             ProtocolConstants.MINECRAFT_1_15_1,
-            ProtocolConstants.MINECRAFT_1_15_2
+            ProtocolConstants.MINECRAFT_1_15_2, // Travertine start
+            ProtocolConstants.MINECRAFT_1_16_20w06a,
+            ProtocolConstants.MINECRAFT_1_16_20w07a,
+            ProtocolConstants.MINECRAFT_1_16_20w08a,
+            ProtocolConstants.MINECRAFT_1_16_20w09a,
+            ProtocolConstants.MINECRAFT_1_16_20w10a,
+            ProtocolConstants.MINECRAFT_1_16_20w11a,
+            ProtocolConstants.MINECRAFT_1_16_20w12a,
+            ProtocolConstants.MINECRAFT_1_16_20w13a,
+            ProtocolConstants.MINECRAFT_1_16_20w13b,
+            ProtocolConstants.MINECRAFT_1_16_20w14a,
+            ProtocolConstants.MINECRAFT_1_16_20w15a,
+            ProtocolConstants.MINECRAFT_1_16_FUTURE_SNAPSHOT // Travertine end
     );
 
     public static final boolean isBeforeOrEq(int before, int other)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
index 1b0e4474..ef242675 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
@@ -587,6 +587,7 @@ public class Commands extends DefinedPacket
             registerDummy( "minecraft:all_recipes" );
             registerDummy( "minecraft:available_sounds" );
             registerDummy( "minecraft:summonable_entities" );
+            registerDummy( "minecraft:available_biomes" ); // Travertine
         }
 
         private static void registerDummy(String name)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index 2aa5ad58..35ba5b95 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -7,6 +7,9 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
 
 @Data
 @NoArgsConstructor
@@ -17,18 +20,62 @@ public class LoginSuccess extends DefinedPacket
 
     private String uuid;
     private String username;
+    private int protocolVersion;
+
+    @Override
+    public void read0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        read(buf);
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        read(buf);
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        write(buf);
+    }
+
+    @Override
+    public void write0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        write(buf);
+    }
 
     @Override
     public void read(ByteBuf buf)
     {
-        uuid = readString( buf );
+        if(ProtocolConstants.isAfterOrEq( this.protocolVersion, ProtocolConstants.MINECRAFT_1_16_20w12a )){
+            int[] ints = {
+                    buf.readInt(),
+                    buf.readInt(),
+                    buf.readInt(),
+                    buf.readInt()
+            };
+            this.uuid = uuidFromIntArray(ints).toString();
+        } else{
+            uuid = readString( buf );
+
+        }
         username = readString( buf );
     }
 
     @Override
     public void write(ByteBuf buf)
     {
-        writeString( uuid, buf );
+        if(ProtocolConstants.isAfterOrEq( this.protocolVersion, ProtocolConstants.MINECRAFT_1_16_20w12a )){
+            int[] ints = uuidToIntArray(UUID.fromString(this.uuid));
+            buf.writeInt(ints[0]);
+            buf.writeInt(ints[1]);
+            buf.writeInt(ints[2]);
+            buf.writeInt(ints[3]);
+        } else {
+            writeString(uuid, buf);
+        }
         writeString( username, buf );
     }
 
@@ -37,4 +84,17 @@ public class LoginSuccess extends DefinedPacket
     {
         handler.handle( this );
     }
+
+    // Probably bad to put these here but I dont care for now
+    public static UUID uuidFromIntArray(int[] ints) {
+        return new UUID((long) ints[0] << 32 | ((long) ints[1] & 0xFFFFFFFFL), (long) ints[2] << 32 | ((long) ints[3] & 0xFFFFFFFFL));
+    }
+
+    public static int[] uuidToIntArray(UUID uuid) {
+        return bitsToIntArray(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
+    }
+
+    public static int[] bitsToIntArray(long long1, long long2) {
+        return new int[]{(int) (long1 >> 32), (int) long1, (int) (long2 >> 32), (int) long2};
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 87f4bf12..dfbf4110 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -562,10 +562,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             // Travertine start
                             if ( ProtocolConstants.isAfterOrEq( getVersion() , ProtocolConstants.MINECRAFT_1_7_6 ) )
                             {
-                                unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
+                                unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName(), getVersion() ) ); // With dashes in between, Travertine 20w12a+
                             } else
                             {
-                                unsafe.sendPacket( new LoginSuccess( getUUID(), getName() ) ); // Without dashes, for older clients.
+                                unsafe.sendPacket( new LoginSuccess( getUUID(), getName(), getVersion() ) ); // Without dashes, for older clients., Travertine 20w12a+
                             }
                             // Travertine end
                             ch.setProtocol( Protocol.GAME );
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index b1da3605..3032cd3a 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -69,7 +69,20 @@ public abstract class EntityMap
             case ProtocolConstants.MINECRAFT_1_15:
             case ProtocolConstants.MINECRAFT_1_15_1:
             case ProtocolConstants.MINECRAFT_1_15_2:
+            case ProtocolConstants.MINECRAFT_1_16_20w06a: // Travertine start
+            case ProtocolConstants.MINECRAFT_1_16_20w07a:
+            case ProtocolConstants.MINECRAFT_1_16_20w08a:
+            case ProtocolConstants.MINECRAFT_1_16_20w09a:
+            case ProtocolConstants.MINECRAFT_1_16_20w10a:
+            case ProtocolConstants.MINECRAFT_1_16_20w11a:
                 return EntityMap_1_15.INSTANCE;
+            case ProtocolConstants.MINECRAFT_1_16_20w12a:
+            case ProtocolConstants.MINECRAFT_1_16_20w13a:
+            case ProtocolConstants.MINECRAFT_1_16_20w13b:
+            case ProtocolConstants.MINECRAFT_1_16_20w14a:
+            case ProtocolConstants.MINECRAFT_1_16_20w15a:
+            case ProtocolConstants.MINECRAFT_1_16_FUTURE_SNAPSHOT:
+                return EntityMap_1_16_s.INSTANCE; // Travertine end
         }
         throw new RuntimeException( "Version " + version + " has no entity map" );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_s.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_s.java
new file mode 100644
index 00000000..4fd3bef8
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_s.java
@@ -0,0 +1,190 @@
+// Travertine start
+package net.md_5.bungee.entitymap;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.UserConnection;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
+
+class EntityMap_1_16_s extends EntityMap
+{
+
+    static final EntityMap_1_16_s INSTANCE = new EntityMap_1_16_s();
+
+    EntityMap_1_16_s()
+    {
+        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x09, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x2C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        /* 20w12a+ 0x44 -> 0x45 */ addRewrite( 0x45, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        /* 20w12a+ 0x45 -> 0x46 */ addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        /* 20w12a+ 0x46 -> 0x47 */ addRewrite( 0x47, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        /* 20w12a+ 0x47 -> 0x48 */ addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        /* 20w12a+ 0x4B -> 0x4C */ addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x56, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x57, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x59, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x5A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+
+        addRewrite( 0x0E, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x1B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+    }
+
+    @Override
+    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
+    public void rewriteClientbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
+    {
+        super.rewriteClientbound( packet, oldId, newId );
+
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+        int jumpIndex = packet.readerIndex();
+        switch ( packetId )
+        {
+            /* 20w12a+ 0x45 -> 0x46 */ case 0x46 /* Attach Entity : PacketPlayOutAttachEntity */:
+                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
+                break;
+            case 0x56 /* Collect Item : PacketPlayOutCollect */:
+                DefinedPacket.readVarInt( packet );
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                break;
+            case 0x4C /* Set Passengers : PacketPlayOutMount */:
+                DefinedPacket.readVarInt( packet );
+                jumpIndex = packet.readerIndex();
+            // Fall through on purpose to int array of IDs
+            case 0x38 /* Destroy Entities : PacketPlayOutEntityDestroy */:
+                int count = DefinedPacket.readVarInt( packet );
+                int[] ids = new int[ count ];
+                for ( int i = 0; i < count; i++ )
+                {
+                    ids[i] = DefinedPacket.readVarInt( packet );
+                }
+                packet.readerIndex( jumpIndex );
+                packet.writerIndex( jumpIndex );
+                DefinedPacket.writeVarInt( count, packet );
+                for ( int id : ids )
+                {
+                    if ( id == oldId )
+                    {
+                        id = newId;
+                    } else if ( id == newId )
+                    {
+                        id = oldId;
+                    }
+                    DefinedPacket.writeVarInt( id, packet );
+                }
+                break;
+            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
+                DefinedPacket.readVarInt( packet );
+                DefinedPacket.readUUID( packet );
+                int type = DefinedPacket.readVarInt( packet );
+
+                if ( type == 2 || type == 102 || type == 72 ) // arrow, fishing_bobber or spectral_arrow
+                {
+                    if ( type == 2 || type == 72 ) // arrow or spectral_arrow
+                    {
+                        oldId = oldId + 1;
+                        newId = newId + 1;
+                    }
+
+                    packet.skipBytes( 26 ); // double, double, double, byte, byte
+                    int position = packet.readerIndex();
+                    int readId = packet.readInt();
+                    if ( readId == oldId )
+                    {
+                        packet.setInt( position, newId );
+                    } else if ( readId == newId )
+                    {
+                        packet.setInt( position, oldId );
+                    }
+                }
+                break;
+            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
+                DefinedPacket.readVarInt( packet ); // Entity ID
+                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
+                UUID uuid = DefinedPacket.readUUID( packet );
+                ProxiedPlayer player;
+                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
+                {
+                    int previous = packet.writerIndex();
+                    packet.readerIndex( readerIndex );
+                    packet.writerIndex( readerIndex + packetIdLength + idLength );
+                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
+                    packet.writerIndex( previous );
+                }
+                break;
+            case 0x33 /* Combat Event : PacketPlayOutCombatEvent */:
+                int event = packet.readUnsignedByte();
+                if ( event == 1 /* End Combat*/ )
+                {
+                    DefinedPacket.readVarInt( packet );
+                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
+                } else if ( event == 2 /* Entity Dead */ )
+                {
+                    int position = packet.readerIndex();
+                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                    packet.readerIndex( position );
+                    DefinedPacket.readVarInt( packet );
+                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
+                }
+                break;
+            /* 20w12a+ 0x44 -> 0x45 */ case 0x45 /* EntityMetadata : PacketPlayOutEntityMetadata */:
+                DefinedPacket.readVarInt( packet ); // Entity ID
+                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 7, protocolVersion ); // fishing hook
+                // Now unused, 8 -> 16 now rewriteMetaVarInt( packet, oldId, newId, 8, protocolVersion ); // fireworks (et al)
+                rewriteMetaVarInt( packet, oldId, newId, 8, protocolVersion ); // guardian beam
+                break;
+            case 0x51 /* Entity Sound Effect : PacketPlayOutEntitySound */:
+                DefinedPacket.readVarInt( packet );
+                DefinedPacket.readVarInt( packet );
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                break;
+        }
+        packet.readerIndex( readerIndex );
+    }
+
+    @Override
+    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
+    {
+        super.rewriteServerbound( packet, oldId, newId );
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+
+        if ( packetId == 0x2B /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
+        {
+            UUID uuid = DefinedPacket.readUUID( packet );
+            ProxiedPlayer player;
+            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
+            {
+                int previous = packet.writerIndex();
+                packet.readerIndex( readerIndex );
+                packet.writerIndex( readerIndex + packetIdLength );
+                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
+                packet.writerIndex( previous );
+            }
+        }
+        packet.readerIndex( readerIndex );
+    }
+}
+// Travertine end
\ No newline at end of file
-- 
2.24.0

