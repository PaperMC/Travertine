From 64e38f84416905c23c0f8430be8a9d17dcdf5be8 Mon Sep 17 00:00:00 2001
From: "Five (Xer)" <admin@xernium.com>
Date: Tue, 23 Jun 2020 18:02:37 +0200
Subject: [PATCH] Travertine 1.16


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 3f1bf41e..1fee93d3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -1,15 +1,98 @@
 package net.md_5.bungee.protocol;
 
+// Travertine (1.16 20w21a+) imports start
 import com.google.common.base.Charsets;
 import io.netty.buffer.ByteBuf;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
+
+import io.netty.buffer.ByteBufInputStream;
+import io.netty.buffer.ByteBufOutputStream;
 import lombok.RequiredArgsConstructor;
+import net.md_5.bungee.protocol.nbt.NBTTag;
+import net.md_5.bungee.protocol.nbt.NBTTagTypes;
+// end
 
 @RequiredArgsConstructor
 public abstract class DefinedPacket
 {
+    // Travertine (1.16 20w21a+) substitute NBT reader/ writer start
+    public static void writeNBT( NBTTag toWrite, ByteBuf buf )
+    {
+        if( toWrite == null )
+        {
+            buf.writeByte(0);
+        } else
+        {
+            try
+            {
+                DataOutput to = new ByteBufOutputStream( buf );
+                to.writeByte( toWrite.getTagIndex() );
+                if ( toWrite.getTagIndex() != 0 )
+                {
+                    to.writeUTF( "" );
+                    toWrite.write( to );
+                }
+            } catch ( IOException e )
+            {
+                e.printStackTrace();
+            }
+        }
+
+    }
+
+    public static NBTTag readNBT( ByteBuf buf )
+    {
+        int indexBefore = buf.readerIndex();
+        byte startType = buf.readByte();
+        if( startType == 0 )
+        {
+            return null;
+        } else
+        {
+            buf.readerIndex( indexBefore );
+            try
+            {
+                DataInput from = new ByteBufInputStream( buf );
+                byte type = from.readByte();
+                if ( type == 0 )
+                {
+                    return NBTTagTypes.newInstance( type );
+                } else
+                {
+                    from.readUTF();
+                    NBTTag ret = NBTTagTypes.newInstance( type );
+                    ret.read( from );
+                    return ret;
+                }
+
+            } catch ( IOException e )
+            {
+                e.printStackTrace();
+                return null;
+            }
+        }
+    }
+
+    // Travertine (1.16) new UUID reader/writer start
+    public static void writeUUIDIntArray(UUID u, ByteBuf buf)
+    {
+        buf.writeInt((int) (u.getMostSignificantBits() >> 32));
+        buf.writeInt((int) u.getMostSignificantBits());
+        buf.writeInt((int) (u.getLeastSignificantBits() >> 32));
+        buf.writeInt((int) u.getLeastSignificantBits());
+    }
+
+    public static UUID readUUIDIntArray(ByteBuf buf)
+    {
+        return new UUID((long) buf.readInt() << 32 | ((long) buf.readInt() & 0xFFFFFFFFL), (long) buf.readInt() << 32 | ((long) buf.readInt() & 0xFFFFFFFFL));
+    }
+    // Travertine end
 
     private static final boolean PROCESS_TRACES = Boolean.getBoolean("waterfall.bad-packet-traces");
     private static final BadPacketException OVERSIZED_VAR_INT_EXCEPTION = new BadPacketException( "VarInt too big" );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 191f0504..de68372c 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -71,7 +71,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x21 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x21 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x20 ) // Travertine (1.16: 1.16-pre1+ 0x21 -> 0x20)
             );
             TO_CLIENT.registerPacket(
                     Login.class,
@@ -79,7 +80,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ), // Travertine
                     map( ProtocolConstants.MINECRAFT_1_9, 0x23 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x26 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x26 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x25 ) // Travertine (1.16: 1.16-pre1+ 0x26 -> 0x25)
             );
             TO_CLIENT.registerPacket(
                     Chat.class,
@@ -87,7 +89,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_7_2, 0x02 ), // Travertine
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0F )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x0E ) // Travertine (1.16: 1.16-pre1+ 0x0F -> 0x0E)
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
@@ -98,13 +101,15 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x35 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x38 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x3B )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x3B ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x3A ) // Travertine (1.16: 1.16-pre1+ 0x3B -> 0x3A)
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
                     BossBar::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0D )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x0C ) // Travertine (1.16: 1.16-pre1+ 0x0D -> 0x0C)
             );
             // Waterfall start
             TO_CLIENT.registerPacket(
@@ -117,7 +122,8 @@ public enum Protocol
                     map(ProtocolConstants.MINECRAFT_1_12_1, 0x4F),
                     map(ProtocolConstants.MINECRAFT_1_13, 0x53),
                     map(ProtocolConstants.MINECRAFT_1_14, 0x59),
-                    map(ProtocolConstants.MINECRAFT_1_15, 0x5A)
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x5A),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x59) // Travertine (1.16: 1.16-pre1+ 0x5A -> 0x59)
             );
             TO_CLIENT.registerPacket(
                     EntityRemoveEffect.class,
@@ -128,7 +134,8 @@ public enum Protocol
                     map(ProtocolConstants.MINECRAFT_1_12_1, 0x33),
                     map(ProtocolConstants.MINECRAFT_1_13, 0x36),
                     map(ProtocolConstants.MINECRAFT_1_14, 0x38),
-                    map(ProtocolConstants.MINECRAFT_1_15, 0x39)
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x39),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x38) // Travertine (1.16: 1.16-pre1+ 0x39 -> 0x38)
             );
             // Waterfall end
             TO_CLIENT.registerPacket(
@@ -138,7 +145,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x2E ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x30 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x34 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x34 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x33 ) // Travertine (1.16: 1.16-pre1+ 0x34 -> 0x33)
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
@@ -146,7 +154,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_7_2, 0x3A ), // Travertine
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x11 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x11 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ) // Travertine (1.16: 1.16-pre1+ 0x11 -> 0x10)
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
@@ -199,7 +208,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x19 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x18 ) // Travertine (1.16: 1.16-pre1+ 0x19 -> 0x18)
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
@@ -208,7 +218,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1B )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x1B ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x1A )
             );
             TO_CLIENT.registerPacket(
                     Title.class,
@@ -218,7 +229,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x4B ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4F ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x50 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x50 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x4F ) // Travertine (1.16: 1.16-pre1+ 0x50 -> 0x4F)
             );
             TO_CLIENT.registerPacket(
                     PlayerListHeaderFooter.class,
@@ -230,7 +242,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x4A ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x4E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x53 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x54 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x54 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x53 ) // Travertine (1.16: 1.16-pre1+ 0x54 -> 0x53)
             );
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
@@ -239,24 +252,28 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1C ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1C )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x1C ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x1B ) // Travertine (1.16: 1.16-pre1+ 0x1C -> 0x1B)
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
                     Commands::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x12 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x12 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x11 ) // Travertine (1.16: 1.16-pre1+ 0x12 -> 0x11)
             );
             TO_CLIENT.registerPacket(
                     GameState.class,
                     GameState::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1F )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x1F ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x1E ) // Travertine (1.16: 1.16-pre1+ 0x1F -> 0x1E)
             );
             TO_CLIENT.registerPacket(
                     ViewDistance.class,
                     ViewDistance::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_14, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x42 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x42 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x41 ) // Travertine (1.16: 1.16-pre1+ 0x42 -> 0x41)
             );
 
             TO_SERVER.registerPacket(
@@ -267,7 +284,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0C ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x0F )
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ) // Travertine (1.16: 20w16a+ 0x0F -> 0x10)
             );
             TO_SERVER.registerPacket(
                     Chat.class,
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index 05f65a80..4cf8a788 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -30,6 +30,7 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_15 = 573;
     public static final int MINECRAFT_1_15_1 = 575;
     public static final int MINECRAFT_1_15_2 = 578;
+    public static final int MINECRAFT_1_16 = 735; // Travertine (1.16)
     public static final List<String> SUPPORTED_VERSIONS = Arrays.asList(
             "1.7.x",
             "1.8.x",
@@ -39,7 +40,8 @@ public class ProtocolConstants
             "1.12.x",
             "1.13.x",
             "1.14.x",
-            "1.15.x"
+            "1.15.x",
+            "1.16" // Travertine (1.16)
     );
     public static final List<Integer> SUPPORTED_VERSION_IDS = Arrays.asList(
             ProtocolConstants.MINECRAFT_1_7_2,
@@ -65,7 +67,8 @@ public class ProtocolConstants
             ProtocolConstants.MINECRAFT_1_14_4,
             ProtocolConstants.MINECRAFT_1_15,
             ProtocolConstants.MINECRAFT_1_15_1,
-            ProtocolConstants.MINECRAFT_1_15_2
+            ProtocolConstants.MINECRAFT_1_15_2,
+            ProtocolConstants.MINECRAFT_1_16
     );
 
     public static final boolean isBeforeOrEq(int before, int other)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ByteTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ByteTag.java
new file mode 100644
index 00000000..094658de
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ByteTag.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class ByteTag extends NBTTag {
+
+    private byte value;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 1;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        to.writeByte( value );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        value = from.readByte();
+    }
+
+    @Override
+    public String toString()
+    {
+        return "value: '" + value + "'\n";
+    }
+
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/CompoundTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/CompoundTag.java
new file mode 100644
index 00000000..d1f4979d
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/CompoundTag.java
@@ -0,0 +1,65 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class CompoundTag extends NBTTag {
+
+    private Map<String, NBTTag> tagMap = new HashMap<String, NBTTag>();
+
+    @Override
+    public int getTagIndex()
+    {
+        return 10;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        for( Map.Entry<String, NBTTag> entry : tagMap.entrySet() )
+        {
+            to.writeByte( entry.getValue().getTagIndex() );
+            if( entry.getValue().getTagIndex() != 0 )
+            {
+                to.writeUTF( entry.getKey() );
+                entry.getValue().write( to );
+            }
+        }
+
+        to.writeByte( 0 );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        tagMap = new HashMap<String, NBTTag>();
+        for ( byte type = from.readByte(); type != 0; type = from.readByte())
+        {
+            String key = from.readUTF();
+            NBTTag value = NBTTagTypes.newInstance( type );
+            value.read( from );
+            tagMap.put( key, value );
+        }
+    }
+
+    @Override
+    public String toString()
+    {
+        String ret = "CompoundTag: \n";
+        for( Map.Entry<String, NBTTag> entry : tagMap.entrySet() )
+        {
+            ret += "\t" + entry.getKey() + "\n";
+            ret += "\t\t" + entry.getValue().toString() + "\n";
+        }
+        return ret;
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/EndTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/EndTag.java
new file mode 100644
index 00000000..8d5767ad
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/EndTag.java
@@ -0,0 +1,36 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class EndTag extends NBTTag {
+
+    @Override
+    public int getTagIndex()
+    {
+        return 0;
+    }
+
+    @Override
+    public void write(DataOutput to) throws IOException
+    {
+    }
+
+    @Override
+    public void read(DataInput from) throws IOException
+    {
+    }
+
+    @Override
+    public String toString()
+    {
+        return "EndTag\n";
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/FloatTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/FloatTag.java
new file mode 100644
index 00000000..39e47f40
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/FloatTag.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class FloatTag extends NBTTag {
+
+    private float value;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 5;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        to.writeFloat( value );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        value = from.readFloat();
+    }
+
+    @Override
+    public String toString()
+    {
+        return "value: '" + value + "'\n";
+    }
+
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/IntTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/IntTag.java
new file mode 100644
index 00000000..d14b31f8
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/IntTag.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class IntTag extends NBTTag {
+
+    private int value;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 3;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        to.writeInt( value );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        value = from.readInt();
+    }
+
+    @Override
+    public String toString()
+    {
+        return "value: '" + value + "'\n";
+    }
+
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ListTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ListTag.java
new file mode 100644
index 00000000..31f86c8b
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/ListTag.java
@@ -0,0 +1,78 @@
+package net.md_5.bungee.protocol.nbt;
+
+import com.google.common.collect.Lists;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+
+public class ListTag extends NBTTag {
+
+    private ArrayList<NBTTag> values = new ArrayList<NBTTag>();
+    private byte tagType;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 9;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        if( values.isEmpty() )
+        {
+            to.writeByte( 0 );
+            to.writeInt( 0 );
+        } else{
+            to.writeByte( tagType );
+            to.writeInt( values.size() );
+
+            for(NBTTag iter : values)
+            {
+                iter.write(to);
+            }
+
+        }
+    }
+
+    @Override
+    public void read(DataInput from) throws IOException
+    {
+        tagType = from.readByte();
+        int len = from.readInt();
+        if( tagType == 0 && len > 0 )
+        {
+            throw new IOException( "ListTag contained filled EndTag or type for Tag was invalid" );
+        } else
+        {
+            ArrayList<NBTTag> read = Lists.newArrayListWithCapacity( len );
+            for( int i = 0; i < len; i++ )
+            {
+                NBTTag inst = NBTTagTypes.newInstance( tagType );
+                inst.read( from );
+                read.add( inst );
+            }
+            values = read;
+        }
+    }
+
+    @Override
+    public String toString()
+    {
+        String ret = "ListTag (Type: " + tagType + " : \n";
+        for( NBTTag d : values )
+        {
+            ret += "\t" + d.toString() + "\n";
+        }
+        return ret;
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/LongTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/LongTag.java
new file mode 100644
index 00000000..453cafe3
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/LongTag.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class LongTag extends NBTTag {
+
+    private long value;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 4;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        to.writeLong( value );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        value = from.readLong();
+    }
+
+    @Override
+    public String toString()
+    {
+        return "value: '" + value + "'\n";
+    }
+
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTag.java
new file mode 100644
index 00000000..4c98cc2f
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTag.java
@@ -0,0 +1,23 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+
+public abstract class NBTTag {
+
+    public abstract int getTagIndex();
+
+    public abstract void write( DataOutput to ) throws IOException;
+
+    public abstract void read( DataInput from ) throws IOException;
+
+    public abstract String toString();
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTagTypes.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTagTypes.java
new file mode 100644
index 00000000..1bc82adf
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/NBTTagTypes.java
@@ -0,0 +1,39 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+
+public class NBTTagTypes {
+
+    public static NBTTag newInstance( byte id ) throws IOException
+    {
+        switch( id )
+        {
+            case 0:
+                return new EndTag();
+            case 1:
+                return new ByteTag();
+            case 3:
+                return new IntTag();
+            case 4:
+                return new LongTag();
+            case 5:
+                return new FloatTag();
+            case 8:
+                return new StringTag();
+            case 9:
+                return new ListTag();
+            case 10:
+                return new CompoundTag();
+            default:
+                throw new IOException( "Unsupported NBT ID: " + id );
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/nbt/StringTag.java b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/StringTag.java
new file mode 100644
index 00000000..c5fd702f
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/nbt/StringTag.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.protocol.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+/*
+ * Travertine NBT-Library substitute module
+ * Minecraft 1.16 - 20w21a+
+ * by Xernium (Five)
+ * */
+
+public class StringTag extends NBTTag {
+
+    private String value;
+
+    @Override
+    public int getTagIndex()
+    {
+        return 8;
+    }
+
+    @Override
+    public void write( DataOutput to ) throws IOException
+    {
+        to.writeUTF( value );
+    }
+
+    @Override
+    public void read( DataInput from ) throws IOException
+    {
+        value = from.readUTF();
+    }
+
+    @Override
+    public String toString()
+    {
+        return "value: '" + value + "'\n";
+    }
+
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
index e82900c7..bc86e60d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
@@ -10,6 +10,8 @@ import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
+import java.util.UUID; // Travertine (1.16: 20w21a+)
+
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
@@ -19,12 +21,18 @@ public class Chat extends MultiVersionPacketV17
 
     private String message;
     private byte position;
+    private UUID sender; // Travertine (1.16: 20w21a+)
 
-    public Chat(String message)
+    // Travertine (1.16+ retain API)
+    public Chat(String message, byte position)
     {
-        this( message, (byte) 0 );
+        this( message, position, /* Travertine (1.16: 20w21a+) */ new UUID( 0, 0 ) );
     }
 
+    public Chat(String message)
+    {
+        this( message, (byte) 0, /* Travertine (1.16: 20w21a+) */ new UUID( 0, 0 ) );
+    }
     // Travertine start
     @Override
     public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
@@ -45,6 +53,12 @@ public class Chat extends MultiVersionPacketV17
         if ( direction == ProtocolConstants.Direction.TO_CLIENT )
         {
             position = buf.readByte();
+            // Travertine (1.16: 20w21a+) start:
+            if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+            {
+                sender = new UUID( buf.readLong(), buf.readLong() );
+            }
+            // Travertine end
         }
     }
 
@@ -68,6 +82,13 @@ public class Chat extends MultiVersionPacketV17
         if ( direction == ProtocolConstants.Direction.TO_CLIENT )
         {
             buf.writeByte( position );
+            // Travertine (1.16: 20w21a+) start:
+            if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+            {
+                buf.writeLong( sender.getMostSignificantBits() );
+                buf.writeLong( sender.getLeastSignificantBits() );
+            }
+            // Travertine end
         }
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
index 2f14d074..e64dad57 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
@@ -547,6 +547,7 @@ public class Commands extends DefinedPacket
             PROVIDERS.put( "minecraft:entity_summon", VOID );
             PROVIDERS.put( "minecraft:dimension", VOID );
             PROVIDERS.put( "minecraft:time", VOID ); // 1.14
+            PROVIDERS.put( "minecraft:uuid", VOID ); // Travertine (1.16: 20w17a+)
         }
 
         private static ArgumentType<?> read(String key, ByteBuf buf)
@@ -618,6 +619,7 @@ public class Commands extends DefinedPacket
             registerDummy( "minecraft:all_recipes" );
             registerDummy( "minecraft:available_sounds" );
             registerDummy( "minecraft:summonable_entities" );
+            registerDummy( "minecraft:available_biomes" ); // Travertine (1.16: 20w06a)
         }
 
         private static void registerDummy(String name)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
index e0cdf82e..cc2a7de9 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
@@ -8,6 +8,7 @@ import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.nbt.NBTTag; // Travertine (1.16: 20w21a+)
 
 @Data
 @NoArgsConstructor
@@ -26,19 +27,45 @@ public class Login extends DefinedPacket
     private int viewDistance;
     private boolean reducedDebugInfo;
     private boolean normalRespawn;
+    private boolean isDebug; // Travertine (1.16: 20w20a+)
+    private boolean isFlat; // Travertine (1.16: 20w20a+)
+    private String dimensionCodecName; // Travertine (1.16: 20w21a+)
+    private NBTTag codecTag; // Travertine (1.16: 20w21a+)
+    private String[] worlds; // Travertine (1.16: 20w22a+)
+    private String world; // Travertine (1.16: 20w22a+)
+    private short previousGamemode; // Travertine (1.16: pre6)
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         entityId = buf.readInt();
-        gameMode = buf.readUnsignedByte();
-        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+        gameMode = buf.readByte(); // Travertine (1.16: pre6) Change to signed for consistency
+        // Travertine (1.16: 20w21a+) start:
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            dimension = buf.readInt();
+            // Travertine (1.16: pre6) previous gamemode (F3 menu)
+            previousGamemode = buf.readByte();
+            // Travertine (1.16: 20w22a) world name array
+            int worldNameArrayLen = readVarInt( buf );
+            worlds = new String[worldNameArrayLen];
+            for ( int iter = 0; iter < worldNameArrayLen; iter++ )
+            {
+                worlds[iter] = readString( buf );
+            }
+            codecTag = readNBT( buf );
+            dimensionCodecName = readString( buf );
+            world = readString( buf ); // Travertine (1.16: 20w22a) world name
         } else
         {
-            dimension = buf.readByte();
+            if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+            {
+                dimension = buf.readInt();
+            } else
+            {
+                dimension = buf.readByte();
+            }
         }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
             seed = buf.readLong();
@@ -48,7 +75,12 @@ public class Login extends DefinedPacket
             difficulty = buf.readUnsignedByte();
         }
         maxPlayers = buf.readUnsignedByte();
-        levelType = readString( buf );
+        // Travertine (1.16: 20w20a+) start:
+        if( protocolVersion < ProtocolConstants.MINECRAFT_1_16 )
+        {
+            levelType = readString( buf );
+        }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_14 )
         {
             viewDistance = readVarInt( buf );
@@ -61,6 +93,13 @@ public class Login extends DefinedPacket
         {
             normalRespawn = buf.readBoolean();
         }
+        // Travertine (1.16: 20w20a+) start:
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            isDebug = buf.readBoolean();
+            isFlat = buf.readBoolean();
+        }
+        // Travertine end
     }
 
     @Override
@@ -68,13 +107,31 @@ public class Login extends DefinedPacket
     {
         buf.writeInt( entityId );
         buf.writeByte( gameMode );
-        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+        // Travertine (1.16: 20w21a+) start:
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            buf.writeInt( dimension );
+            // Travertine (1.16: pre6) previous gamemode (F3 menu)
+            buf.writeByte( previousGamemode );
+            // Travertine (1.16: 20w22a) world name array
+            writeVarInt( worlds.length, buf );
+            for ( int iter = 0; iter < worlds.length; iter++ )
+            {
+                writeString( worlds[iter], buf );
+            }
+            writeNBT( codecTag, buf );
+            writeString( dimensionCodecName, buf );
+            writeString( world, buf ); // Travertine (1.16: 20w22a) world name
         } else
         {
-            buf.writeByte( dimension );
+            if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+            {
+                buf.writeInt( dimension );
+            } else
+            {
+                buf.writeByte( dimension );
+            }
         }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
             buf.writeLong( seed );
@@ -84,7 +141,12 @@ public class Login extends DefinedPacket
             buf.writeByte( difficulty );
         }
         buf.writeByte( maxPlayers );
-        writeString( levelType, buf );
+        // Travertine (1.16: 20w20a+) start:
+        if( protocolVersion < ProtocolConstants.MINECRAFT_1_16 )
+        {
+            writeString( levelType, buf );
+        }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_14 )
         {
             writeVarInt( viewDistance, buf );
@@ -97,6 +159,13 @@ public class Login extends DefinedPacket
         {
             buf.writeBoolean( normalRespawn );
         }
+        // Travertine (1.16: 20w20a+) start:
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            buf.writeBoolean( isDebug );
+            buf.writeBoolean( isFlat );
+        }
+        // Travertine end
     }
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index 2aa5ad58..13dacb8b 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -7,6 +7,9 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
 
 @Data
 @NoArgsConstructor
@@ -17,18 +20,33 @@ public class LoginSuccess extends DefinedPacket
 
     private String uuid;
     private String username;
+    private int protocolVersion; // Travertine (1.16: 20w12a+)
 
     @Override
     public void read(ByteBuf buf)
     {
-        uuid = readString( buf );
+        // Travertine (1.16: 20w12a+ UUID is now a four-int array) start
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            uuid = readUUIDIntArray( buf ).toString();
+        } else {
+            uuid = readString( buf );
+        }
+        // Travertine end
         username = readString( buf );
     }
 
     @Override
     public void write(ByteBuf buf)
     {
-        writeString( uuid, buf );
+        // Travertine (1.16: 20w12a+ UUID is now a four-int array) start
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            writeUUIDIntArray( UUID.fromString( uuid ), buf);
+        } else {
+            writeString( uuid, buf );
+        }
+        // Travertine end
         writeString( username, buf );
     }
 
@@ -37,4 +55,19 @@ public class LoginSuccess extends DefinedPacket
     {
         handler.handle( this );
     }
+
+    // Travertine (1.16: 20w12a+ forward protocol version) start
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        read(buf);
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion){
+        this.protocolVersion = protocolVersion;
+        write(buf);
+    }
+    // Travertine end
+
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
index 1f544f26..097cd2a5 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
@@ -21,11 +21,26 @@ public class Respawn extends DefinedPacket
     private short difficulty;
     private short gameMode;
     private String levelType;
+    private boolean keepAllPlayerData; // Travertine (1.16: 20w18a+)
+    private boolean isDebug; // Travertine (1.16: 20w20a+)
+    private boolean isFlat; // Travertine (1.16: 20w20a+)
+    private String dimensionCodecName; // Travertine (1.16: 20w21a+)
+    private String world; // Travertine (1.16: 20w22a+)
+    private short previousGamemode; // Travertine (1.16: pre6)
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        dimension = buf.readInt();
+        // Travertine (1.16: 20w21a+) start:
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            dimensionCodecName = readString( buf );
+            world = readString( buf ); // Travertine (1.16: 20w22a+)
+        } else
+        {
+            dimension = buf.readInt();
+        }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
             seed = buf.readLong();
@@ -34,14 +49,35 @@ public class Respawn extends DefinedPacket
         {
             difficulty = buf.readUnsignedByte();
         }
-        gameMode = buf.readUnsignedByte();
-        levelType = readString( buf );
+        gameMode = buf.readByte(); // Travertine (1.16: pre6) Change to signed for consistency
+        // Travertine (1.16: 20w20+) start:
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            // Travertine (1.16: pre6) previous gamemode (F3 menu)
+            previousGamemode = buf.readByte();
+            isDebug = buf.readBoolean();
+            isFlat = buf.readBoolean();
+            keepAllPlayerData = buf.readBoolean();
+        } else
+        {
+            levelType = readString( buf );
+        }
+        // Travertine end
     }
 
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        buf.writeInt( dimension );
+        // Travertine (1.16: 20w21a+) start:
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            writeString( dimensionCodecName, buf );
+            writeString( world, buf ); // Travertine (1.16: 20w22a+)
+        } else
+        {
+            buf.writeInt( dimension );
+        }
+        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
             buf.writeLong( seed );
@@ -51,7 +87,19 @@ public class Respawn extends DefinedPacket
             buf.writeByte( difficulty );
         }
         buf.writeByte( gameMode );
-        writeString( levelType, buf );
+        // Travertine (1.16: 20w18a+) start:
+        if( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        {
+            // Travertine (1.16: pre6) previous gamemode (F3 menu)
+            buf.writeByte( previousGamemode );
+            buf.writeBoolean( isDebug );
+            buf.writeBoolean( isFlat );
+            buf.writeBoolean( keepAllPlayerData );
+        } else
+        {
+            writeString( levelType, buf );
+        }
+        // Travertine end
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/PacketConstants.java b/proxy/src/main/java/net/md_5/bungee/PacketConstants.java
index 000c450e..89306a4e 100644
--- a/proxy/src/main/java/net/md_5/bungee/PacketConstants.java
+++ b/proxy/src/main/java/net/md_5/bungee/PacketConstants.java
@@ -7,8 +7,8 @@ import net.md_5.bungee.protocol.packet.Respawn;
 public class PacketConstants
 {
 
-    public static final Respawn DIM1_SWITCH = new Respawn( (byte) 1, 0, (byte) 0, (byte) 0, "default" );
-    public static final Respawn DIM2_SWITCH = new Respawn( (byte) -1, 0, (byte) 0, (byte) 0, "default" );
+    public static final Respawn DIM1_SWITCH = new Respawn( (byte) 1, 0, (byte) 0, (byte) 0, "default", false, /* Travertine (1.16: 20w18a+) */ false, false, /* Travertine 1.16 (20w20a+)*/ "minecraft:overworld", /* Travertine 1.16 (20w21a+)*/ "bungeecord:dimension_switch1", /* Travertine 1.16 (20w22a+)*/ (byte) 0 /* Travertine 1.16 (pre6+)*/);
+    public static final Respawn DIM2_SWITCH = new Respawn( (byte) -1, 0, (byte) 0, (byte) 0, "default", false, /* Travertine (1.16: 20w18a+) */ false, false, /* Travertine 1.16 (20w20a+)*/ "minecraft:overworld", /* Travertine 1.16 (20w21a+)*/ "bungeecord:dimension_switch1", /* Travertine 1.16 (20w22a+)*/ (byte) 0 /* Travertine 1.16 (pre6+)*/ );
     public static final ClientStatus CLIENT_LOGIN = new ClientStatus( (byte) 0 );
     public static final PluginMessage FORGE_MOD_REQUEST = new PluginMessage( "FML", new byte[]
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 53ef99cd..1e460584 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -247,7 +247,7 @@ public class ServerConnector extends PacketHandler
 
             // Set tab list size, TODO: what shall we do about packet mutability
             Login modLogin = new Login( login.getEntityId(), login.getGameMode(), (byte) login.getDimension(), login.getSeed(), login.getDifficulty(),
-                    (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn() );
+                    (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat(), /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), login.getCodecTag(), /* Travertine 1.16 (20w21a+)*/ login.getWorlds(), login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ );
 
             user.unsafe().sendPacket( modLogin );
 
@@ -307,7 +307,7 @@ public class ServerConnector extends PacketHandler
             user.setDimensionChange( true );
             if ( !user.isDisableEntityMetadataRewrite() && login.getDimension() == user.getDimension() ) // Waterfall - defer
             {
-                user.unsafe().sendPacket( new Respawn( ( login.getDimension() >= 0 ? -1 : 0 ), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType() ) );
+                user.unsafe().sendPacket( new Respawn( ( login.getDimension() >= 0 ? -1 : 0 ), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType(), false,  /* Travertine (1.16: 20w18a+) */ login.isDebug(), login.isFlat(), /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), /* Travertine 1.16 (20w21a+)*/ login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ ) );
             }
 
             user.setServerEntityId( login.getEntityId() );
@@ -319,20 +319,20 @@ public class ServerConnector extends PacketHandler
 
                 // Only send if we are not in the same dimension
                 if (user.getDimension() != login.getDimension()) {
-                    user.unsafe().sendPacket( new Respawn(user.getDimension() == 0 ? -1 : 0, login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType()));
+                    user.unsafe().sendPacket( new Respawn(user.getDimension() == 0 ? -1 : 0, login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType(), false,  /* Travertine (1.16: 20w18a+) */ login.isDebug(), login.isFlat(),  /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), /* Travertine 1.16 (20w21a+)*/ login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ ));
                 }
 
                 Login modLogin = new Login( login.getEntityId(),login.getGameMode(), login.getDimension(), login.getSeed(),
-                        login.getDifficulty(), login.getMaxPlayers(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn() );
+                        login.getDifficulty(), login.getMaxPlayers(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat(), /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), login.getCodecTag(), /* Travertine 1.16 (20w21a+)*/ login.getWorlds(), login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ );
                 user.unsafe().sendPacket(modLogin);
 
                 // Only send if we're in the same dimension
                 if (user.getDimension() == login.getDimension()) {
-                    user.unsafe().sendPacket( new Respawn(user.getDimension() == 0 ? -1 : 0, login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType()));
+                    user.unsafe().sendPacket( new Respawn(user.getDimension() == 0 ? -1 : 0, login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType(), false,  /* Travertine (1.16: 20w18a+) */ login.isDebug(), login.isFlat(),  /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), /* Travertine 1.16 (20w21a+)*/ login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ ));
                 }
             }
             // Waterfall end
-            user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType() ) );
+            user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getLevelType(), false,  /* Travertine (1.16: 20w18a+) */ login.isDebug(), login.isFlat(), /* Travertine 1.16 (20w20a+)*/ login.getDimensionCodecName(), /* Travertine 1.16 (20w21a+)*/ login.getWorld(), /* Travertine 1.16 (20w22a+)*/ login.getPreviousGamemode() /* Travertine 1.16 (pre6+)*/ ) );
             if ( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_14 )
             {
                 user.unsafe().sendPacket( new ViewDistance( login.getViewDistance() ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 4891ec28..7af4bf7b 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -466,7 +466,7 @@ public final class UserConnection implements ProxiedPlayer
 
     private void sendMessage(ChatMessageType position, String message)
     {
-        unsafe().sendPacket( new Chat( message, (byte) position.ordinal() ) );
+        unsafe().sendPacket( new Chat( message, (byte) position.ordinal(), new UUID( 0, 0 ) /* Travertine 1.16 (20w21a+)*/ ) );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index b1c37a55..b7f8b574 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -562,10 +562,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             // Travertine start
                             if ( ProtocolConstants.isAfterOrEq( getVersion() , ProtocolConstants.MINECRAFT_1_7_6 ) )
                             {
-                                unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
+                                unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName(), getVersion() /* Travertine (1.16: 20w12a+) */ ) ); // With dashes in between
                             } else
                             {
-                                unsafe.sendPacket( new LoginSuccess( getUUID(), getName() ) ); // Without dashes, for older clients.
+                                unsafe.sendPacket( new LoginSuccess( getUUID(), getName(), getVersion() /* Travertine (1.16: 20w12a+) */ ) ); // Without dashes, for older clients.
                             }
                             // Travertine end
                             ch.setProtocol( Protocol.GAME );
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index 73b05167..c8ac14da 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -71,6 +71,8 @@ public abstract class EntityMap
             case ProtocolConstants.MINECRAFT_1_15_1:
             case ProtocolConstants.MINECRAFT_1_15_2:
                 return EntityMap_1_15.INSTANCE;
+            case ProtocolConstants.MINECRAFT_1_16:
+                return EntityMap_1_16.INSTANCE;
         }
         throw new RuntimeException( "Version " + version + " has no entity map" );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java
new file mode 100644
index 00000000..a9b3d310
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java
@@ -0,0 +1,194 @@
+// Travertine start
+package net.md_5.bungee.entitymap;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.UserConnection;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
+
+class EntityMap_1_16 extends EntityMap
+{
+
+    static final EntityMap_1_16 INSTANCE = new EntityMap_1_16();
+
+    EntityMap_1_16()
+    {
+        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        /* Travertine (1.16: 1.16-pre1+ 0x03 -> 0x02) */  addRewrite( 0x02, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        /* Travertine (1.16: 1.16-pre1+ 0x04 -> 0x03) */  addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        /* Travertine (1.16: 1.16-pre1+ 0x05 -> 0x04) */  addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        /* Travertine (1.16: 1.16-pre1+ 0x06 -> 0x05) */  addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        /* Travertine (1.16: 1.16-pre1+ 0x09 -> 0x08) */  addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        /* Travertine (1.16: 1.16-pre1+ 0x01C -> 0x1B) */  addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        /* Travertine (1.16: 1.16-pre1+ 0x029 -> 0x28) */  addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        /* Travertine (1.16: 1.16-pre1+ 0x3A -> 0x29) */  addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        /* Travertine (1.16: 1.16-pre1+ 0x2B -> 0x2A) */  addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        /* Travertine (1.16: 1.16-pre1+ 0x2C -> 0x2B) */  addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        /* Travertine (1.16: 1.16-pre1+ 0x39 -> 0x38) */  addRewrite( 0x38, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        /* Travertine (1.16: 1.16-pre1+ 0x3C -> 0x3B) */  addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        /* Travertine (1.16: 1.16-pre1+ 0x3F -> 0x3D) */  addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x44, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x45, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x47, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        /* Travertine (1.16: 1.16-pre1+ 0x56 -> 0x55) */  addRewrite( 0x55, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        /* Travertine (1.16: 1.16-pre1+ 0x57 -> 0x56) */  addRewrite( 0x56, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        /* Travertine (1.16: 1.16-pre1+ 0x59 -> 0x58) */  addRewrite( 0x58, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        /* Travertine (1.16: 1.16-pre1+ 0x5A -> 0x59) */  addRewrite( 0x59, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+
+        addRewrite( 0x0E, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        /* Travertine (1.16: 20w16a+ 0x1B -> 0x1C) */  addRewrite( 0x1C, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+    }
+
+    @Override
+    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
+    public void rewriteClientbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
+    {
+        super.rewriteClientbound( packet, oldId, newId );
+
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+        int jumpIndex = packet.readerIndex();
+        switch ( packetId )
+        {
+            case 0x45 /* Attach Entity : PacketPlayOutAttachEntity */:
+                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
+                break;
+            /* Travertine (1.16: 1.16-pre1+ 0x56 -> 0x55) */ case 0x55 /* Collect Item : PacketPlayOutCollect */:
+            DefinedPacket.readVarInt( packet );
+            rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+            break;
+            /* Travertine (1.16: 1.16-pre1+ 0x4C -> 0x4B) */ case 0x4B /* Set Passengers : PacketPlayOutMount */:
+            DefinedPacket.readVarInt( packet );
+            jumpIndex = packet.readerIndex();
+            // Fall through on purpose to int array of IDs
+            /* Travertine (1.16: 1.16-pre1+ 0x38 -> 0x37) */ case 0x37 /* Destroy Entities : PacketPlayOutEntityDestroy */:
+            int count = DefinedPacket.readVarInt( packet );
+            int[] ids = new int[ count ];
+            for ( int i = 0; i < count; i++ )
+            {
+                ids[i] = DefinedPacket.readVarInt( packet );
+            }
+            packet.readerIndex( jumpIndex );
+            packet.writerIndex( jumpIndex );
+            DefinedPacket.writeVarInt( count, packet );
+            for ( int id : ids )
+            {
+                if ( id == oldId )
+                {
+                    id = newId;
+                } else if ( id == newId )
+                {
+                    id = oldId;
+                }
+                DefinedPacket.writeVarInt( id, packet );
+            }
+            break;
+            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
+                DefinedPacket.readVarInt( packet );
+                DefinedPacket.readUUID( packet );
+                int type = DefinedPacket.readVarInt( packet );
+
+                if ( type == 2 || type == 102 || type == 72 ) // arrow, fishing_bobber or spectral_arrow
+                {
+                    if ( type == 2 || type == 72 ) // arrow or spectral_arrow
+                    {
+                        oldId = oldId + 1;
+                        newId = newId + 1;
+                    }
+
+                    packet.skipBytes( 26 ); // double, double, double, byte, byte
+                    int position = packet.readerIndex();
+                    int readId = packet.readInt();
+                    if ( readId == oldId )
+                    {
+                        packet.setInt( position, newId );
+                    } else if ( readId == newId )
+                    {
+                        packet.setInt( position, oldId );
+                    }
+                }
+                break;
+            /* Travertine (1.16: 1.16-pre1+ 0x05 -> 0x04) */ case 0x04 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
+            DefinedPacket.readVarInt( packet ); // Entity ID
+            int idLength = packet.readerIndex() - readerIndex - packetIdLength;
+            UUID uuid = DefinedPacket.readUUID( packet );
+            ProxiedPlayer player;
+            if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
+            {
+                int previous = packet.writerIndex();
+                packet.readerIndex( readerIndex );
+                packet.writerIndex( readerIndex + packetIdLength + idLength );
+                DefinedPacket.writeUUID( player.getUniqueId(), packet );
+                packet.writerIndex( previous );
+            }
+            break;
+            /* Travertine (1.16: 1.16-pre1+ 0x33 -> 0x32) */ case 0x32 /* Combat Event : PacketPlayOutCombatEvent */:
+            int event = packet.readUnsignedByte();
+            if ( event == 1 /* End Combat*/ )
+            {
+                DefinedPacket.readVarInt( packet );
+                rewriteInt( packet, oldId, newId, packet.readerIndex() );
+            } else if ( event == 2 /* Entity Dead */ )
+            {
+                int position = packet.readerIndex();
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                packet.readerIndex( position );
+                DefinedPacket.readVarInt( packet );
+                rewriteInt( packet, oldId, newId, packet.readerIndex() );
+            }
+            break;
+            /* Travertine (1.16: 1.16-pre1+ 0x45 -> 0x44) */ case 0x44 /* EntityMetadata : PacketPlayOutEntityMetadata */:
+            DefinedPacket.readVarInt( packet ); // Entity ID
+            rewriteMetaVarInt( packet, oldId + 1, newId + 1, 7, protocolVersion ); // fishing hook
+            /*
+             * Travertine (1.16: 20w12a+)
+             * metaVarInt was shifted to 8 from 16 and 16 omitted, previously:
+             * rewriteMetaVarInt( packet, oldId, newId, 8, protocolVersion ); // fireworks (et al)
+             * */
+            rewriteMetaVarInt( packet, oldId, newId, 8, protocolVersion ); // guardian beam
+            break;
+            /* Travertine (1.16: 1.16-pre1+ 0x51 -> 0x50) */ case 0x50 /* Entity Sound Effect : PacketPlayOutEntitySound */:
+            DefinedPacket.readVarInt( packet );
+            DefinedPacket.readVarInt( packet );
+            rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+            break;
+        }
+        packet.readerIndex( readerIndex );
+    }
+
+    @Override
+    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
+    {
+        super.rewriteServerbound( packet, oldId, newId );
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+
+        if ( packetId == 0x2C /* Travertine (1.16: 20w16a+ 0x2B -> 0x2C) Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
+        {
+            UUID uuid = DefinedPacket.readUUID( packet );
+            ProxiedPlayer player;
+            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
+            {
+                int previous = packet.writerIndex();
+                packet.readerIndex( readerIndex );
+                packet.writerIndex( readerIndex + packetIdLength );
+                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
+                packet.writerIndex( previous );
+            }
+        }
+        packet.readerIndex( readerIndex );
+    }
+}
+// Travertine end
\ No newline at end of file
-- 
2.24.0

